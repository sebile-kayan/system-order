/**
 * LOGIN SCREEN - GiriÅŸ EkranÄ±
 * 
 * Bu ekran Ã§alÄ±ÅŸanlarÄ±n kullanÄ±cÄ± adÄ± ve ÅŸifre ile giriÅŸ yapmasÄ±nÄ± saÄŸlar.
 * Admin tarafÄ±ndan atanan kullanÄ±cÄ± adÄ± ile giriÅŸ yapÄ±lÄ±r. GiriÅŸ baÅŸarÄ±lÄ± olduktan sonra
 * kullanÄ±cÄ±nÄ±n rollerine gÃ¶re uygun dashboard'a yÃ¶nlendirilir.
 */
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { useAuth } from '../context/AuthRolesContext';
import { Colors } from '../constants/Colors';
import { Typography } from '../constants/Typography';
import { Spacing } from '../constants/Spacing';
import Button from '../components/Button';
import Input from '../components/Input';
import Card from '../components/Card';

const LoginScreen = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();

  const handleLogin = async () => {
    if (!username.trim() || !password.trim()) {
      Alert.alert('Hata', 'LÃ¼tfen kullanÄ±cÄ± adÄ± ve ÅŸifre giriniz.');
      return;
    }

    setIsLoading(true);
    try {
      const success = await login({ username: username.trim(), password });
      
      if (success) {
        // GiriÅŸ baÅŸarÄ±lÄ±, navigation otomatik olarak AuthContext tarafÄ±ndan yÃ¶netilecek
        // Burada manuel navigation yapmaya gerek yok
      } else {
        Alert.alert('Hata', 'KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±.');
      }
    } catch (error) {
      Alert.alert('Hata', 'GiriÅŸ yapÄ±lÄ±rken bir hata oluÅŸtu.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <View style={styles.header}>
          <Text style={styles.title}>Restoran YÃ¶netimi</Text>
          <Text style={styles.subtitle}>Ã‡alÄ±ÅŸan GiriÅŸi</Text>
        </View>

        <Card style={styles.form}>
          <Input
            label="KullanÄ±cÄ± AdÄ±"
            value={username}
            onChangeText={setUsername}
            placeholder="KullanÄ±cÄ± adÄ±nÄ±zÄ± giriniz"
            autoCapitalize="none"
            autoCorrect={false}
            accessibilityLabel="KullanÄ±cÄ± adÄ±"
            testID="username-input"
          />

          <Input
            label="Åžifre"
            value={password}
            onChangeText={setPassword}
            placeholder="Åžifrenizi giriniz"
            secureTextEntry
            autoCapitalize="none"
            autoCorrect={false}
            accessibilityLabel="Åžifre"
            testID="password-input"
          />

          <Button
            title={isLoading ? 'GiriÅŸ YapÄ±lÄ±yor...' : 'GiriÅŸ Yap'}
            onPress={handleLogin}
            disabled={isLoading}
            loading={isLoading}
            style={styles.loginButton}
          />
        </Card>

        <View style={styles.footer}>
          <Text style={styles.footerText}>
            GiriÅŸ bilgilerinizi admin'den alabilirsiniz
          </Text>
          <Text style={styles.testUsersTitle}>Test KullanÄ±cÄ±larÄ± (Åžifre: 123):</Text>
          <Text style={styles.testUsersText}>
            â€¢ admin / 123 (Sadece Admin){'\n'}
            â€¢ chef / 123 (Sadece Åžef){'\n'}
            â€¢ waiter / 123 (Sadece Garson){'\n'}
            â€¢ cashier / 123 (Sadece Kasiyer){'\n'}
            â€¢ chef_waiter / 123 (Åžef + Garson){'\n'}
            â€¢ waiter_cashier / 123 (Garson + Kasiyer){'\n'}
            â€¢ all_roles / 123 (TÃ¼m Roller - ROL DEÄžÄ°ÅžTÄ°RME Ä°Ã‡Ä°N)
          </Text>
          <Text style={styles.testNote}>
            ðŸ’¡ Rol deÄŸiÅŸtirme butonlarÄ±nÄ±n hepsini gÃ¶rmek iÃ§in "all_roles" kullanÄ±cÄ±sÄ± ile giriÅŸ yapÄ±n!
          </Text>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: Spacing.screenPadding,
  },
  header: {
    alignItems: 'center',
    marginBottom: Spacing['4xl'],
  },
  title: {
    ...Typography.styles.h1,
    color: Colors.secondary,
    marginBottom: Spacing.sm,
  },
  subtitle: {
    ...Typography.styles.body,
    color: Colors.textSecondary,
  },
  form: {
    padding: Spacing['2xl'],
  },
  loginButton: {
    marginTop: Spacing.sm,
  },
  footer: {
    alignItems: 'center',
    marginTop: Spacing['3xl'],
  },
  footerText: {
    ...Typography.styles.caption,
    color: Colors.textTertiary,
    textAlign: 'center',
  },
  testUsersTitle: {
    ...Typography.styles.bodySmall,
    fontWeight: Typography.fontWeight.semibold,
    color: Colors.textPrimary,
    marginTop: Spacing.xl,
    marginBottom: Spacing.sm,
    textAlign: 'center',
  },
  testUsersText: {
    ...Typography.styles.caption,
    color: Colors.textSecondary,
    textAlign: 'left',
    lineHeight: 16,
    backgroundColor: Colors.gray50,
    padding: Spacing.md,
    borderRadius: Spacing.radius.md,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  testNote: {
    ...Typography.styles.caption,
    color: Colors.primary,
    fontWeight: Typography.fontWeight.semibold,
    textAlign: 'center',
    marginTop: Spacing.md,
    padding: Spacing.sm,
    backgroundColor: Colors.errorLight + '20',
    borderRadius: Spacing.radius.sm,
    borderWidth: 1,
    borderColor: Colors.errorLight,
  },
});

export default LoginScreen;
